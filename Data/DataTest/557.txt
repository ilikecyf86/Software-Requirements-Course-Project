Better DTO Generation
kind/enhancement kind/epic team/platform kind/enhancement kind/enhancement 
Hi, In this thread I would like to address the architectural issues of the current approach for providing DTO functionality in Che. The current approach relies on reflection which requires a fully compiled DTO definition interfaces before generating the DTO implementations. This forces Che extensions that generate DTOs to explicitly add sources re-compile during the maven build process in order to get consistent results. The result is a complex non-standard configuration and dependencies in pom.xml. A better approach is using Java Annotation Processing which allows integrating into the compilation phase seamlessly with minimal configuration. APT also provides native methods for adding resources to the compilation, without any need for ad-hoc maven configurations. Another major issue is the code generation method. Currently the DTO generation generates code by appending hundreds of string token. This is very hazardous and hard to maintain/develop. The standard way for code generation is using text templating engines such as StringTemplate or FreeMarker. Such tools allow defining the code templates externally and simplify the operation greatly. I have a POC for a DTO processor that generates sever code. Many feature are already supported well and some tests with example use are included https://github.com/tareqhs/che-core/tree/dto_processor This change is required in the dependency mangement https://github.com/tareqhs/che-depmgt/tree/st4_version Please review my suggestion and provide any insights, thank you