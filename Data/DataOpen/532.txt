Improvements for building and running projects in Che that use docker & docker-compose
team/enterprise kind/planning status/info-needed team/enterprise kind/enhancement 
Currently from within a workspace the PWD is /project but those files on the Docker host are /home/user/che/workspaces (by default, depending on CHE_WORKSPACE_STORAGE and such). The issue The problem is that often people develop their project by building multiple docker images, linked together, and mounting local files on them to have changes apply instantly. For example (from within a development workspace): $ docker build --pull -t frontend .
$ docker run --rm -v $PWD:/code:ro frontend
 Supposing either the docker socket or DOCKER_HOST is set up, this is possible but would not work because it'd try to mount /project from the docker host and not the /project from the Che workspace). Suggested solution Instead of project, set PWD to CHE_WORKSPACE_STORAGE/$WORKSPACE_NAME (e.g. /home/user/che/workspaces/foo). This way it'll be the same path on the Docker host since workspaces should be mounted already anyway. Preferably have /home/user/che/workspaces under a simpler directory like /storage/workspaces (see #2755). Alternatives Mounting using the known real path, but this makes it Che-specific and the code development isn't portable anymore and it's specific to Che (should be the other way around). Have everything you need inside your Che workspace: This means duplicating your deployment environment of multiple docker images locally, which is not only hard to do, but hard to maintain, and may likely break when deployed because you're not testing the way it's deployment. For example a mount or link is different, or a binary changed, or... Support docker-compose.yml to build workspaces (see #1580) but then it's hard to restart/reload containers, and there would be multiple "shells" so cannot just start a shell, and tons of issues. It's possible and good to avoid exposing docker directly but it's a lot harder for everyone/everything.