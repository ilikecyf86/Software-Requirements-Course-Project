Simplify creating the custom Che IDE assemblies with a Maven lifecycle
kind/enhancement target/che6 
In order to create a custom Che IDE assembly a lot of boilerplate code in the pom.xml files have to be copy-pasted. See how it usually looks: pom.xml for compiling Che IDE GWT app <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>fabric8-ide-assembly-parent</artifactId>
        <groupId>com.redhat.che</groupId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>
    <artifactId>fabric8-ide-gwt-app</artifactId>
    <packaging>gwt-app</packaging>
    <name>Fabric8 Che IDE :: GWT App</name>
    <description>Compiles Che IDE GWT application and packages it as a WAR-like archive which contains pure output of the GWT compiler</description>
    <properties>
        <generated.sources.directory>${project.build.directory}/generated-sources/gen</generated.sources.directory>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
        </dependency>
        <dependency>
            <groupId>com.redhat.che</groupId>
            <artifactId>fabric8-plugin-product-info</artifactId>
            <type>gwt-lib</type>
        </dependency>
        <dependency>
            <groupId>org.eclipse.che.core</groupId>
            <artifactId>che-ide-full</artifactId>
            <type>gwt-lib</type>
            <exclusions>
                <exclusion>
                    <artifactId>che-plugin-product-info</artifactId>
                    <groupId>org.eclipse.che.plugin</groupId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.eclipse.che.core</groupId>
                <artifactId>che-core-gwt-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>process-excludes</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>net.ltgt.gwt.maven</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <moduleName>org.eclipse.che.ide.IDE</moduleName>
                    <moduleShortName>_app</moduleShortName>
                    <jvmArgs>
                        <arg>${gwt.compiler.jvmArgs.Xss}</arg>
                        <arg>${gwt.compiler.jvmArgs.Xmx}</arg>
                    </jvmArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-ExtensionManager</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>org.eclipse.che.util.ExtensionManagerGenerator</mainClass>
                            <arguments>
                                <argument>--rootDir=${generated.sources.directory}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-IDEInjector</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>org.eclipse.che.util.IDEInjectorGenerator</mainClass>
                            <arguments>
                                <argument>--rootDir=${generated.sources.directory}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>generate-DtoRegistry</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>org.eclipse.che.util.DtoFactoryVisitorRegistryGenerator</mainClass>
                            <arguments>
                                <argument>--rootDir=${generated.sources.directory}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.eclipse.che.core</groupId>
                <artifactId>che-core-dyna-provider-generator-maven-plugin</artifactId>
                <version>${che.version}</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <outputDirectory>${generated.sources.directory}</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <timestampFormat>{0, date, yyyy-MM-dd HH:mm:ss}</timestampFormat>
                    <buildNumberPropertyName>revision</buildNumberPropertyName>
                    <doCheck>false</doCheck>
                    <doUpdate>false</doUpdate>
                    <shortRevisionLength>16</shortRevisionLength>
                </configuration>
            </plugin>
            <!-- pass the generated sources to compiler:compile -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${generated.sources.directory}</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>compilation-mappings-properties</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <length mode="each" property="compilation-mappings-properties">
                                    <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}/_app">
                                        <include name="**/*.cache.js" />
                                    </fileset>
                                </length>
                                <echo append="false" file="${project.build.directory}/${project.artifactId}-${project.version}/_app/compilation-mappings.properties">${compilation-mappings-properties}</echo>
                                <replace file="${project.build.directory}/${project.artifactId}-${project.version}/_app/compilation-mappings.properties" token="${project.build.directory}/${project.artifactId}-${project.version}/_app/" value="" />
                            </tasks>
                        </configuration>
                    </execution>
                    <execution>
                        <id>buildnumber</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <echo append="false" file="${project.build.directory}/classes/org/eclipse/che/ide/ext/help/client/BuildInfo.properties">revision = ${revision}
                                            buildTime = ${timestamp}
                                            version = ${project.version}</echo>
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project> pom.xml for packaging Che IDE web app <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>fabric8-ide-assembly-parent</artifactId>
        <groupId>com.redhat.che</groupId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>
    <artifactId>fabric8-ide-assembly-ide-war</artifactId>
    <packaging>war</packaging>
    <name>Fabric8 IDE :: Assemblies :: IDE</name>
    <properties>
        <generated.sources.directory>${project.build.directory}/generated-sources/gen</generated.sources.directory>
        <gwt.log.enable>true</gwt.log.enable>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.redhat.che</groupId>
            <artifactId>fabric8-ide-gwt-app</artifactId>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>org.eclipse.che</groupId>
            <artifactId>assembly-ide-war</artifactId>
            <type>war</type>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <configuration>
                            <ignoredUnusedDeclaredDependencies>
                                <!-- dependency is required just to overlay it's content -->
                                <dep>com.redhat.che:fabric8-ide-gwt-app</dep>
                            </ignoredUnusedDeclaredDependencies>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <overlays>
                        <overlay>
                            <groupId>org.eclipse.che</groupId>
                            <artifactId>assembly-ide-war</artifactId>
                            <type>war</type>
                            <includes>
                                <include>_app/IDE.html</include>
                                <include>_app/IDE.css</include>
                                <include>_app/factory-review.svg</include>
                                <include>_app/factory-contribute.svg</include>
                                <include>_app/favicon.ico</include>
                                <include>META-INF/context.xml</include>
                                <include>WEB-INF/rewrite.config</include>
                                <include>WEB-INF/web.xml</include>
                                <include>WEB-INF/classes/org/eclipse/che/*.class</include>
                                <include>WEB-INF/lib/</include>
                            </includes>
                        </overlay>
                        <overlay />
                    </overlays>
                </configuration>
            </plugin>
        </plugins>
    </build>
 </project> Сreating the custom Che IDE assemblies may be simplified significantly by adding the ide-war Maven packaging which will trigger the ide-war lifecycle. Also, need to wrap all additional tasks into mojos. ide-war lifecycle is aimed to facilitate the build of the Che IDE assembly and might have the same phases as the war lifecycle but with additional bindings specific for building Che IDE app: Phase Bindings initialize gwt:enforce-encoding generate-sources che:generate-extension-manager, che:generate-ide-injector, generate-dto-factory-visitor-registry, che:generate-che-core-dyna-provider generate-resources gwt:generate-module process-resources che:process-excludes, resources:resources compile compiler:compile process-classes che:dynamodule-generate process-test-resources resources:testResources test surefire:test prepare-package gwt:compile, che:generate-compilation-mappings-properties package war:war install install:install deploy deploy:deploy See how pom.xml for building customized Che IDE app might look like with ide-war packaging: pom.xml with ide-war packaging <?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>che-parent</artifactId>
        <groupId>org.eclipse.che</groupId>
        <version>6.0.0-M3-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <artifactId>custom-ide-assembly</artifactId>
    <packaging>ide-war</packaging>
    <dependencies>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.che</groupId>
            <artifactId>assembly-ide-war</artifactId>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>com.redhat.che</groupId>
            <artifactId>fabric8-plugin-product-info</artifactId>
            <type>gwt-lib</type>
        </dependency>
        <dependency>
            <groupId>org.eclipse.che.core</groupId>
            <artifactId>che-ide-full</artifactId>
            <type>gwt-lib</type>
            <exclusions>
                <exclusion>
                    <artifactId>che-plugin-product-info</artifactId>
                    <groupId>org.eclipse.che.plugin</groupId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>net.ltgt.gwt.maven</groupId>
                <artifactId>gwt-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <moduleName>org.eclipse.che.ide.IDE</moduleName>
                    <moduleShortName>_app</moduleShortName>
                    <jvmArgs>
                        <arg>${gwt.compiler.jvmArgs.Xss}</arg>
                        <arg>${gwt.compiler.jvmArgs.Xmx}</arg>
                    </jvmArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>