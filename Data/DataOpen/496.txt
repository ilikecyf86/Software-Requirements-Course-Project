Integration of Graphic modeling editor & Language Server with Language Server Protocol
kind/question 
Hi. I am developing a proof of concept where I try to build a graphic editor for different graphical languages (UML, BPEL, ...) where the editor is agnostic about the language used (it only knows the object palette): language knowledge is decoupled from editor using a Language Server for each language. This is achieved using a JavaScript library with specific components for the desired graphic languages (firstly JointJS but I have moved to GoJS because of the problem described in issue #3639) that has the capability of providing a JSON representation of the displayed model; this JSON representation would be processed by the Language Server (for a proof of concept, this would be good enough). I have already implemented & deployed successfully a Language Server (with its corresponding workspace agent) for the UML representation provided by GoJS, and now I have to link the JS editor with that Language Server, and I would like to reuse as much as possible of the available code that Che already provides for this. It is specially important to be able to process Language Server responses because they will involve changes in the graphic representation provided to the user. The use case I have in mind would be as follows: When a new model is created, a sample model is created using GoJS Any library event will trigger a save operation of the JSON representation of the model in the file system. As this file will have the proper file type, LanguageServer editor will trigger the change to LanguageServer to examine it. LanguageServer response will somehow captured by my extension logic and will produce proper changes in the represented model. I have verified that the LSP client is available in the che-plugin-languageserver-ide module. I foresee several ways of using that module: Integrating it with my extension using its EditorProvider and somehow "shadowing" it with my graphical editor. Using LSP client classes provided in package org.eclipse.che.plugin.languageserver.ide.service and implementing the rest on my own (I would prefer not doing this) ... (there are many intermediate or different paths) I would like to have some hints about which is the best way to integrate that LanguageServer Editor with my graphical editor (or if there is a better way to integrate the graphic model with a Language Server). OS and version: Che version: 5.2.2 OS and version: Ubuntu 16.04 (Linux kernel 4.4.0-57-generic) Docker version: 1.13.1 Che install: Binaries from Eclipse Che 5.2.2 docker containers combined with compiled assembly from the same version to integrate my graphic editor Thank you very much for your help, Best Regards, Alberto.