Generate Che Docker Images with Custom Names & Registries
kind/enhancement 
Running Eclipse Che requires a cascading set of Docker images. There are a number of scenarios where the default values of these image names and tags should be changed: Che engineers working in a branch would like dedicated set of images for their branch. Custom assembly generator would like to apply branding to image names CI systems would like to run tests against a branch in isolation and need separate images We can envision a pattern of Docker image names that match: <organization>/<prefix>-<name>:<version>
 where <organization> defaults to eclipse; <prefix> defaults to che; <name> reflects the image name that we use like server, init, or base; and <version> reflects either the provided version or branch name the images are built from. We can have defaults for these values, or let developers override these with command line parameters in the build scripts used for generating Docker images. To have a tailored set of Docker images to run Che, the following updates must be made: The name of eclipse/che-base:<version> must be modified. I think we can assume that the bootstrap and utilities image names that are contained within the base are not allowed to be changed. TODO: Is this really needed - maybe generation of the base image doesn't need custom naming. The /dockerfiles/init docker image would need to be built with updated name. The /dockerfiles/che docker image would need to be built with updated name. The /dockerfiles/cli/version directory would need to be updated with a new version-specific folder that contains a new images file that uses the names generated above. The /dockerfiles/cli/Dockerfile would need to be updated to use the new name for the base image in the FROM syntax. This would only be necessary if re-generation of the base image is done. These Docker images would have to be included in the custom assembly from the archetype generator. We would need to update the build scripts in the /dockefiles directory to have a build-che.sh script that just builds the images necessary to run che - base, init, che, cli. This would accept the appropriate flags for setting the organization, prefix, and version names. There would be an option to skip tests.