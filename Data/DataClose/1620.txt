Rework agents installation
kind/epic 
The problems: Current mechanism of Agents running requires too many interactions with master and for some cases per-agent specific/custom "launching" java code. As a consequence of unpredictable big amount of interactions with master it may generate big log traffic which may significantly impact on master and client loading/workability (up to make it broken). The problem like we used to have with command execs. Solution: Make small (as small as possible, Golang app) agent-installer which will be injected first all the time when machine requires Agents. I.e. any time when workspace -> environment -> machine section contains one or more agent entry. Responsibilities of agent-installer: to run agent script locally on machine to orchestrate (they may not be installed simultaneously to avoid conflicts, only one-by-one) multiple agents's launching using applicable criteria to check if agent installed/launched such as: -- check if bash scripts process completed (installation only usecase) if no server launching supposed (agent knows that) -- check if server(s) launched (installation and launching usecase) to send machine log messages via websocket to interested sides to send notifications about starting/completing/failing during agent installation to interested sides. @garagatyi @tolusha let's make a plan to replace old mechanism as discussed. Agents installation specification #4096 Refactor exec + terminal agent to separate components #4097 Move exec-agent/process module to core/process #5131 Add process exit code to the core/process process_died event #5147 Remove core/process -> core/rpc dependency #5149 Separate exec and terminal agent #4098 Define agents configuration file format #5151 Add ability to connect to jsonrpc websocket endpoint using core/rpc #5150 Review and define agent bootstrapper events #5266 Implement bootstrappert #4099 Rework WS start back end code to use new install agent API for workspace start #4101 Get rid of java agent launchers #5413