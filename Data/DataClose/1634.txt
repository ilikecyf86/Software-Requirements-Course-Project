Creating language plugins is way too complicated
kind/question kind/enhancement kind/question 
Creating language plugins appears to be way too complicated. The process could be as simple as this: Create a grammar file with some specified syntax named my-language.grammar Create a sort of settings file (e.g. a simple .ini) which specifies: the grammar file name the file extension(s) the name of the binary of the language server some sort of simple universal way of specifying how to obtain & build the language server, e.g. either referring to some more complicated build system file - but preferably not just maven as you seem to expect people to use now. E.g. why not also allow something as simple as specifying an install script that will be fetched and run? It is inside a docker container after all optionally some few basic suggested default style settings for che's code editor, like tab indentation width, whether tabs should be replaced by spaces per default, etc. Put it all together in a .ZIP and then I should be allowed to click some "Install support for additional language" button inside eclipse che in the main UI (outside of any workspace) and simply specify such a .ZIP - and then all workspaces could try to install and provide this and just omit support for the language if the language server fails to install in the given environment, or the language server could simply be globally installed and provided for all workspaces in a separate docker container By the way, this is kind of similar to how it works for the popular Atom editor, minus language server since they don't really have that sorted out yet. Instead, even just to provide basic syntax highlighting, it appears I am expected to understand: This complicated API graph about what consumes/interacts with what https://www.eclipse.org/che/docs/plugins/introduction/index.html jar packaging with a pom.xml https://www.eclipse.org/che/docs/plugins/create-and-build-extensions/index.html (this might be second nature for all java devs, but definitely isn't e.g. for someone used to autotools or some other entirely different build system) Dependency injection with Object Provider/Consumer https://www.eclipse.org/che/docs/plugins/dependency-injection-basics/index.html How to build this example here https://github.com/eclipse/che/tree/master/samples/sample-plugin-json - because it has some commands like che ... which really don't look like they would work outside on my host system, so I assume I am meant to run them inside a workspace, inside some of the many che containers, ... but it doesn't even actually say where I should run them in the beginning so apparently I am supposed to guess - EDIT: ah, apparently they are supposed to be run on the host but inside the che repository. A remark at the beginning that this process requires cloning the che repo and running a custom build of che would be very helpful! (this is e.g. not required for the Atom editor or various other software that people can build plugins for) And if I do all of this, then I am just going to have an idea how to inject something at all into eclipse che, not how to specifically inject syntax highlighting and/or advanced language server support for a new language. While I understand this complicated process is required for more advanced plugins, most language support plugins (especially with the new language server protocol) will look pretty similar and they will require very comparable functionality, so expecting people to go through that lengthy process seems borderline insane to me. TL;DR: please create a way simpler plugin format as an alternative format specifically just for new language support. (unless it already exists of course and I just missed it in the docs)