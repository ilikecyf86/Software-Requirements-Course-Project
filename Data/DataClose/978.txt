Client-Master-Infrastructure v6 communication
kind/enhancement 
DRAFT: Peers to communicate: client (like IDE or UD or anything) master (where Workspace API/SPI works) infrastructure which covers all the complexity of Workspace Runtime starting/stopping and communication For asynchronous JSON-RPC communication Workspace use 2 WebSocket endpoints (physical channels): Status Channel maintained by Master. Which means that Master creates unique per-Workspace endpoint and sends it to Client and passes to Infrastructure as a Status Channel. Infrastructure uses this channel to send status events to. Master listens and reacts on events from Infrastructure which causes changes of Workspace state. Output Channel may be created by Infrastructure and point to different than Master host in order to not to load it with potentially big amount of output from Machines and Installers. In a simpler case Infrastructure may point this channel to Master host (same host/port as Status Channel). Workspace Starting status messages: Client (directly or by reference to persisted configuration) sends sync (REST API) Workspace.start with Workspace Configuration object (JSON format) Master broadcasts Workspace.start event (state channel), set Workspace.STARTING state, prepares Runtime Context object and asynchronously calls Infrastructure.start(). Starting from this moment by Client request Workspace API should return Workspace Runtime Object which includes Runtime (Machines, Servers) in its actual intermediate state. Infra starting Runtime. It supposed to be long process. In a course of Workspace starting: Infra starting Machines and (optionally if it it can support it) emits Machine.start event and sets Machine.STARTING, then RUNNING state Infra installing Bootstrapper and starting Installers. Installer emits start/finish event. Also, in a case if it starts Servers it may emit Server.start and running Infra may support some specific statuses and emit specific events (such as snapshotting/restoring) to inform a Client Infra may recognize if something wrong happened on start, decide to stop Runtime and notify Master about it with Runtime.stop event. Master broadcasts Workspace.stop event (Status channel), set Workspace.STOPPING state Infra returns Runtime, Master broadcasts Workspace.didStart event and set Workspace.RUNNING. Running Workspace: Client request or by Infra scheduler performed Servers healthchecking (?) Infra may recognize if something wrong happened on runtime (OOM for example), decide to stop Runtime and notify Master about it with Runtime.stop event. Master broadcasts Workspace.stop event (Status channel), set Workspace.STOPPING staus Workspace Stopping: Client sends sync (REST API) Workspace.stop OR Infra recognizes that something wrong happened and notifies Master. Master broadcasts Workspace.stop event (Status channel), set Workspace.STOPPING status In a case if Client asks for the Workspace Runtime Object Master returning Runtime (Machines, Servers) in its actual intermediate state (stopping in progress) Runtime destroyed, Master broadcasts Workspace.didStop event and set Workspace.STOPPED status Output messages sent to OutputChannel: Output of Machine starting (such as Docker container create/start output) Output of Installers (Agents)