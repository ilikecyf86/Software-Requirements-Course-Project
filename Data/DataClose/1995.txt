Resource manager framework refactoring and unit test covering
kind/task status/analyzing team/plugin kind/epic kind/task kind/task kind/epic status/analyzing 
PoC The main goals of refactoring resource manager component is to: Clean up the existed codebase, which includes in removing deprecated methods from the model interfaces Freezing method signatures that were marked as com.google.common.annotations.Beta in main model interfaces Separate user level and service level, this means that user level should be responsible for providing interfaces to the user to operate directly with resources objects, that represent file objects on the virtual file system. In the same time, service level should be responsible for providing and interface which will communicate with real implementation of particular resource manager. In this case resource manager definition can describe mechanism which operates with file system over http, java libraries, etc. Unit tests covering Analyzing tasks that should be completed during refactor process: Refactor org.eclipse.che.ide.api.resources.Resource #3244 Mark org.eclipse.che.ide.api.resources.VirtualFile#getContentUrl and create org.eclipse.che.ide.api.resources.VirtualFile#getURL #3236 Mark org.eclipse.che.ide.api.resources.VirtualFile#getMediaType as deprecated #3235 Remove org.eclipse.che.ide.api.resources.VirtualFile#getMediaType deprecated method #3321 Remove deprecated org.eclipse.che.ide.api.resources.VirtualFile#getPath #3233 ProjectServiceClient refactoring #4221