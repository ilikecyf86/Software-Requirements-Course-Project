Improved Eclipse Che extensions development flow
kind/epic team/platform 
The goal of this task is to provide up-to-date view how to build Eclipse Che extension. Before we can do that we would like to optimise couple of things. We need to have strong definition of the things that user can override and that is not. Basically users don't have a choice to override Orion editor or docker. So it's not a plugin. And giving them ability to override any components may be risky. #4430 Setup of GWT compilation is quite long. che/assembly/assembly-ide-war/pom.xml Lines 345 to 417 in 871ef34 <groupId>org.codehaus.mojo</groupId> <artifactId>exec-maven-plugin</artifactId> <executions> <execution> <id>gwt-xml</id> <phase>generate-sources</phase> <goals> <goal>java</goal> </goals> <configuration> <mainClass>org.eclipse.che.util.GwtXmlGenerator</mainClass> <arguments> <argument>--rootDir=${generated.sources.directory}</argument> <argument>--loggingEnabled=${gwt.log.enable}</argument> </arguments> </configuration> </execution> <execution> <id>extManager-client</id> <phase>generate-sources</phase> <goals> <goal>java</goal> </goals> <configuration> <mainClass>org.eclipse.che.util.ExtensionManagerGenerator</mainClass> <arguments> <argument>--rootDir=${generated.sources.directory}</argument> </arguments> </configuration> </execution> <execution> <id>IDEInjector-client</id> <phase>generate-sources</phase> <goals> <goal>java</goal> </goals> <configuration> <mainClass>org.eclipse.che.util.IDEInjectorGenerator</mainClass> <arguments> <argument>--rootDir=${generated.sources.directory}</argument> </arguments> </configuration> </execution> <execution> <id>DtoRegistry-client</id> <phase>generate-sources</phase> <goals> <goal>java</goal> </goals> <configuration> <mainClass>org.eclipse.che.util.DtoFactoryVisitorRegistryGenerator</mainClass> <arguments> <argument>--rootDir=${generated.sources.directory}</argument> </arguments> </configuration> </execution> </executions> </plugin> <plugin> <groupId>org.eclipse.che.core</groupId> <artifactId>che-core-dyna-provider-generator-maven-plugin</artifactId> <version>${project.version}</version> <executions> <execution> <phase>generate-sources</phase> <goals> <goal>generate</goal> </goals> </execution> </executions> <configuration> <outputDirectory>${generated.sources.directory}</outputDirectory> </configuration> We agree with Florent's opinion that it would be nice to combine all of that in single maven plugin che-gwt-maven-plugin. The goal of this plugin is to provide any necessary actions for GWT compilation in single place. Also it should fail fast if some gwt components are missing with good error message. GWT error messages is quite hurd to read. #4373 We also would like to make a two concept "Base" and "Default" assembly of agent-server and agent-client. "Basic" - means the minimum set of components necessary to run IDE and edit file. "Full" - means default functionality of Che or Condenvy. In this way users may decide: does they want to have something really small and simple or they want to extend che or Codenvy #4403 Add to @org.eclipse.che.ide.api.extensio.Extension parameter that will describe path to the gwt.xml file for corresponding module. By default if this parameter is not set try to use file with same name like annotated class but with extension gwt.xml. This allows us before GWT compilation phase check all inherits and throw exception if declared module not found in classpath. #4404 Move plugin-dashboard to ide core #4614 Move che-plugin-machine-ext-client to IDE core #4596 Find a better place for classes from che-plugin-sdk-env-local #4595 Make che-plugin-product-info optional for IDE core #4594 Move into separate module OAuthTokenProvider from che-core-api-auth #4462 Plugin-docker is not a plugin #4432 Make plugin-factory part of ide core and wsagent #4619