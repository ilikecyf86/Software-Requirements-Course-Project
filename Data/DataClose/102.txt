GitChangesDetector is not properly optimized
kind/enhancement team/enterprise sprint/current-sprint status/in-progress status/code-review status/in-progress status/code-review sprint/current-sprint 
At the moment org.eclipse.che.api.git.GitChangesDetector is not optimized and may cause performance issues along with "inotify limit exceeding problem". The issue In actual implementation git changes detector registers and tracks (with watch service) all files that match specific criteria defined by the following lines of code: private PathMatcher matcher() {
    return it -> !(isDirectory(it) || GIT_DIR.equals(it.getNameCount() > 2 ? it.getName(2).toString() : ""));
} As you probably noticed this matcher definition is very interesting because it matches almost all files except those in .git directory. Hence after you perform an import of a huge project you will have all project files registered within watch service. That will most likely make an IDE user sad. First IDE will be unable to perform operations that depend on file watchers because registration of a great number of files within short time period will make java watch service unresponsive. Then right after the registration the related business logic is applied to that great amount of files (e.g. transfer git status to an IDE) which results in even more time of unresponsiveness. Eventually a user may see the inotify exceeding limit error message which may later result in other malfunctions and even outside of a java application. The solution I guess the most effective solution here would be to perform the dynamic tracking of relevant file sets. In our case it should be enough to track files in a project explorer and in editor tabs. In other words we start tracking files that a user observes in his IDE tab opening an editor or expanding a directory and we stop tracking those as he closes corresponding editor tab or collapses corresponding directory. This approach is already applied in places where we need to track file or directory content changes. For a project like Eclipse Che this should decrease the amount of tracked files from dozens of thousands to dozens.