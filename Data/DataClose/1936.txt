how do I add local (proprietary) tools to Eclipse Che server installed locally?
kind/question kind/docs severity/P2 
Hello, I've spent some time trying to install/deploy the Che server on a local workstation behind a corporate proxy, and eventually succeeded after some hacks. I am now able to access the Che server at http://127.0.0.1 through Chrome running on the same workstation and navigate the Eclipse Che dashboard, create and run workspaces, create compile and run applications, etc. Unfortunately I cannot access the server from other workstations in the same corporate domain, but that's an issue I'm willing to live with for now (I'm in a time crunch). At this time I'm only interested in the C++ stack. Here's what I'm trying to do next: I have some proprietary tools built on the same local workstation, and I want to add them to the Che server and make them available to the user through the Che IDE in the browser. So in the same way g++ is available as a command in a workspace built with a C++ stack, I want to add a folder that contains all these proprietary tools to the Che server, and then be able to use the tools the same way I'm running g++ in a regular C++-stack based workspace (either in the Che IDE terminal, or as part of a custom-defined command for the IDE). I have some experience building Docker images with Dockerfiles. For example I've built an image (let's call it ubuntu-test) based on the following Dockerfile (the test_app folder is in the same folder as the Dockerfile): FROM ubuntu:16.04 ADD test_app /projects/test_app The test_app folder contains a C++ application (source code and binary) that I can then execute from the Docker container running the ubuntu-test image. What I'd like to do is build upon the Eclipse Che server image the same way I build on the ubuntu:16.04 in the example above. I already tried building a custom Eclipse Che Docker image with the following Dockerfile: FROM eclipse/che-server:5.0.0-latest ADD test_app /projects/test_app Then I built the Docker image: sudo docker build -t test . and run it (the env var is a temp workaround for a problem I was having with the workspace agent failing): sudo docker run --rm -t -v /var/run/docker.sock:/var/run/docker.sock -e CHE_DOCKER_MACHINE_HOST_EXTERNAL=127.0.0.1 test start I can then access the Eclipse Che dashboard and workspaces just as before at http://127.0.0.1, but the test_app folder does not exist under /projects. Any suggestions on how I can accomplish this? Thanks in advance for your help!